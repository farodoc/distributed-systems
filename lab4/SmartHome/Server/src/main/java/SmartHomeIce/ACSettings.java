//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHomeIce;

public class ACSettings implements java.lang.Cloneable,
                                   java.io.Serializable
{
    public Temperature targetTemperature;

    public FanSpeed fanSpeed;

    public boolean swingEnabled;

    public ACSettings()
    {
        this.targetTemperature = new Temperature();
        this.fanSpeed = FanSpeed.Low;
    }

    public ACSettings(Temperature targetTemperature, FanSpeed fanSpeed, boolean swingEnabled)
    {
        this.targetTemperature = targetTemperature;
        this.fanSpeed = fanSpeed;
        this.swingEnabled = swingEnabled;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        ACSettings r = null;
        if(rhs instanceof ACSettings)
        {
            r = (ACSettings)rhs;
        }

        if(r != null)
        {
            if(this.targetTemperature != r.targetTemperature)
            {
                if(this.targetTemperature == null || r.targetTemperature == null || !this.targetTemperature.equals(r.targetTemperature))
                {
                    return false;
                }
            }
            if(this.fanSpeed != r.fanSpeed)
            {
                if(this.fanSpeed == null || r.fanSpeed == null || !this.fanSpeed.equals(r.fanSpeed))
                {
                    return false;
                }
            }
            if(this.swingEnabled != r.swingEnabled)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHomeIce::ACSettings");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, targetTemperature);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fanSpeed);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, swingEnabled);
        return h_;
    }

    public ACSettings clone()
    {
        ACSettings c = null;
        try
        {
            c = (ACSettings)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Temperature.ice_write(ostr, this.targetTemperature);
        FanSpeed.ice_write(ostr, this.fanSpeed);
        ostr.writeBool(this.swingEnabled);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.targetTemperature = Temperature.ice_read(istr);
        this.fanSpeed = FanSpeed.ice_read(istr);
        this.swingEnabled = istr.readBool();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ACSettings v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public ACSettings ice_read(com.zeroc.Ice.InputStream istr)
    {
        ACSettings v = new ACSettings();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ACSettings> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ACSettings v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<ACSettings> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(ACSettings.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final ACSettings _nullMarshalValue = new ACSettings();

    /** @hidden */
    public static final long serialVersionUID = -1288761760L;
}
