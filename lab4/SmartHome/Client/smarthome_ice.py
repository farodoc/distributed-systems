# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHomeIce
_M_SmartHomeIce = Ice.openModule('SmartHomeIce')
__name__ = 'SmartHomeIce'

if 'DeviceError' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.DeviceError = Ice.createTempClass()
    class DeviceError(Ice.UserException):
        def __init__(self, message=''):
            self.message = message

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHomeIce::DeviceError'

    _M_SmartHomeIce._t_DeviceError = IcePy.defineException('::SmartHomeIce::DeviceError', DeviceError, (), False, None, (('message', (), IcePy._t_string, False, 0),))
    DeviceError._ice_type = _M_SmartHomeIce._t_DeviceError

    _M_SmartHomeIce.DeviceError = DeviceError
    del DeviceError

if 'NoPowerError' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.NoPowerError = Ice.createTempClass()
    class NoPowerError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHomeIce::NoPowerError'

    _M_SmartHomeIce._t_NoPowerError = IcePy.defineException('::SmartHomeIce::NoPowerError', NoPowerError, (), False, None, ())
    NoPowerError._ice_type = _M_SmartHomeIce._t_NoPowerError

    _M_SmartHomeIce.NoPowerError = NoPowerError
    del NoPowerError

if 'DeviceNotInOperationalState' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.DeviceNotInOperationalState = Ice.createTempClass()
    class DeviceNotInOperationalState(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHomeIce::DeviceNotInOperationalState'

    _M_SmartHomeIce._t_DeviceNotInOperationalState = IcePy.defineException('::SmartHomeIce::DeviceNotInOperationalState', DeviceNotInOperationalState, (), False, None, ())
    DeviceNotInOperationalState._ice_type = _M_SmartHomeIce._t_DeviceNotInOperationalState

    _M_SmartHomeIce.DeviceNotInOperationalState = DeviceNotInOperationalState
    del DeviceNotInOperationalState

if 'PowerState' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.PowerState = Ice.createTempClass()
    class PowerState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    PowerState.On = PowerState("On", 0)
    PowerState.Off = PowerState("Off", 1)
    PowerState.Standby = PowerState("Standby", 2)
    PowerState._enumerators = { 0:PowerState.On, 1:PowerState.Off, 2:PowerState.Standby }

    _M_SmartHomeIce._t_PowerState = IcePy.defineEnum('::SmartHomeIce::PowerState', PowerState, (), PowerState._enumerators)

    _M_SmartHomeIce.PowerState = PowerState
    del PowerState

_M_SmartHomeIce._t_SmartDevice = IcePy.defineValue('::SmartHomeIce::SmartDevice', Ice.Value, -1, (), False, True, None, ())

if 'SmartDevicePrx' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.SmartDevicePrx = Ice.createTempClass()
    class SmartDevicePrx(Ice.ObjectPrx):

        def getPowerState(self, context=None):
            return _M_SmartHomeIce.SmartDevice._op_getPowerState.invoke(self, ((), context))

        def getPowerStateAsync(self, context=None):
            return _M_SmartHomeIce.SmartDevice._op_getPowerState.invokeAsync(self, ((), context))

        def begin_getPowerState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.SmartDevice._op_getPowerState.begin(self, ((), _response, _ex, _sent, context))

        def end_getPowerState(self, _r):
            return _M_SmartHomeIce.SmartDevice._op_getPowerState.end(self, _r)

        def setPowerState(self, state, context=None):
            return _M_SmartHomeIce.SmartDevice._op_setPowerState.invoke(self, ((state, ), context))

        def setPowerStateAsync(self, state, context=None):
            return _M_SmartHomeIce.SmartDevice._op_setPowerState.invokeAsync(self, ((state, ), context))

        def begin_setPowerState(self, state, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.SmartDevice._op_setPowerState.begin(self, ((state, ), _response, _ex, _sent, context))

        def end_setPowerState(self, _r):
            return _M_SmartHomeIce.SmartDevice._op_setPowerState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeIce.SmartDevicePrx.ice_checkedCast(proxy, '::SmartHomeIce::SmartDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeIce.SmartDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::SmartDevice'
    _M_SmartHomeIce._t_SmartDevicePrx = IcePy.defineProxy('::SmartHomeIce::SmartDevice', SmartDevicePrx)

    _M_SmartHomeIce.SmartDevicePrx = SmartDevicePrx
    del SmartDevicePrx

    _M_SmartHomeIce.SmartDevice = Ice.createTempClass()
    class SmartDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeIce::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeIce::SmartDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::SmartDevice'

        def getPowerState(self, current=None):
            raise NotImplementedError("servant method 'getPowerState' not implemented")

        def setPowerState(self, state, current=None):
            raise NotImplementedError("servant method 'setPowerState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_SmartDeviceDisp)

        __repr__ = __str__

    _M_SmartHomeIce._t_SmartDeviceDisp = IcePy.defineClass('::SmartHomeIce::SmartDevice', SmartDevice, (), None, ())
    SmartDevice._ice_type = _M_SmartHomeIce._t_SmartDeviceDisp

    SmartDevice._op_getPowerState = IcePy.Operation('getPowerState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeIce._t_PowerState, False, 0), ())
    SmartDevice._op_setPowerState = IcePy.Operation('setPowerState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHomeIce._t_PowerState, False, 0),), (), None, ())

    _M_SmartHomeIce.SmartDevice = SmartDevice
    del SmartDevice

_M_SmartHomeIce._t_COSensor = IcePy.defineValue('::SmartHomeIce::COSensor', Ice.Value, -1, (), False, True, None, ())

if 'COSensorPrx' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.COSensorPrx = Ice.createTempClass()
    class COSensorPrx(_M_SmartHomeIce.SmartDevicePrx):

        def isCOLevelSafe(self, context=None):
            return _M_SmartHomeIce.COSensor._op_isCOLevelSafe.invoke(self, ((), context))

        def isCOLevelSafeAsync(self, context=None):
            return _M_SmartHomeIce.COSensor._op_isCOLevelSafe.invokeAsync(self, ((), context))

        def begin_isCOLevelSafe(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.COSensor._op_isCOLevelSafe.begin(self, ((), _response, _ex, _sent, context))

        def end_isCOLevelSafe(self, _r):
            return _M_SmartHomeIce.COSensor._op_isCOLevelSafe.end(self, _r)

        def getCOlevel(self, context=None):
            return _M_SmartHomeIce.COSensor._op_getCOlevel.invoke(self, ((), context))

        def getCOlevelAsync(self, context=None):
            return _M_SmartHomeIce.COSensor._op_getCOlevel.invokeAsync(self, ((), context))

        def begin_getCOlevel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.COSensor._op_getCOlevel.begin(self, ((), _response, _ex, _sent, context))

        def end_getCOlevel(self, _r):
            return _M_SmartHomeIce.COSensor._op_getCOlevel.end(self, _r)

        def setCOAlarmThreshold(self, threshold, context=None):
            return _M_SmartHomeIce.COSensor._op_setCOAlarmThreshold.invoke(self, ((threshold, ), context))

        def setCOAlarmThresholdAsync(self, threshold, context=None):
            return _M_SmartHomeIce.COSensor._op_setCOAlarmThreshold.invokeAsync(self, ((threshold, ), context))

        def begin_setCOAlarmThreshold(self, threshold, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.COSensor._op_setCOAlarmThreshold.begin(self, ((threshold, ), _response, _ex, _sent, context))

        def end_setCOAlarmThreshold(self, _r):
            return _M_SmartHomeIce.COSensor._op_setCOAlarmThreshold.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeIce.COSensorPrx.ice_checkedCast(proxy, '::SmartHomeIce::COSensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeIce.COSensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::COSensor'
    _M_SmartHomeIce._t_COSensorPrx = IcePy.defineProxy('::SmartHomeIce::COSensor', COSensorPrx)

    _M_SmartHomeIce.COSensorPrx = COSensorPrx
    del COSensorPrx

    _M_SmartHomeIce.COSensor = Ice.createTempClass()
    class COSensor(_M_SmartHomeIce.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeIce::COSensor', '::SmartHomeIce::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeIce::COSensor'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::COSensor'

        def isCOLevelSafe(self, current=None):
            raise NotImplementedError("servant method 'isCOLevelSafe' not implemented")

        def getCOlevel(self, current=None):
            raise NotImplementedError("servant method 'getCOlevel' not implemented")

        def setCOAlarmThreshold(self, threshold, current=None):
            raise NotImplementedError("servant method 'setCOAlarmThreshold' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_COSensorDisp)

        __repr__ = __str__

    _M_SmartHomeIce._t_COSensorDisp = IcePy.defineClass('::SmartHomeIce::COSensor', COSensor, (), None, (_M_SmartHomeIce._t_SmartDeviceDisp,))
    COSensor._ice_type = _M_SmartHomeIce._t_COSensorDisp

    COSensor._op_isCOLevelSafe = IcePy.Operation('isCOLevelSafe', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeIce._t_DeviceNotInOperationalState,))
    COSensor._op_getCOlevel = IcePy.Operation('getCOlevel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_SmartHomeIce._t_DeviceNotInOperationalState,))
    COSensor._op_setCOAlarmThreshold = IcePy.Operation('setCOAlarmThreshold', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError, _M_SmartHomeIce._t_DeviceError))

    _M_SmartHomeIce.COSensor = COSensor
    del COSensor

if 'moveCommand' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.moveCommand = Ice.createTempClass()
    class moveCommand(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    moveCommand.PanLeft = moveCommand("PanLeft", 0)
    moveCommand.PanRight = moveCommand("PanRight", 1)
    moveCommand.TiltUp = moveCommand("TiltUp", 2)
    moveCommand.TiltDown = moveCommand("TiltDown", 3)
    moveCommand.ZoomIn = moveCommand("ZoomIn", 4)
    moveCommand.ZoomOut = moveCommand("ZoomOut", 5)
    moveCommand._enumerators = { 0:moveCommand.PanLeft, 1:moveCommand.PanRight, 2:moveCommand.TiltUp, 3:moveCommand.TiltDown, 4:moveCommand.ZoomIn, 5:moveCommand.ZoomOut }

    _M_SmartHomeIce._t_moveCommand = IcePy.defineEnum('::SmartHomeIce::moveCommand', moveCommand, (), moveCommand._enumerators)

    _M_SmartHomeIce.moveCommand = moveCommand
    del moveCommand

if 'CameraSettings' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.CameraSettings = Ice.createTempClass()
    class CameraSettings(object):
        def __init__(self, pan=0.0, tilt=0.0, zoom=0.0):
            self.pan = pan
            self.tilt = tilt
            self.zoom = zoom

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHomeIce.CameraSettings):
                return NotImplemented
            else:
                if self.pan != other.pan:
                    return False
                if self.tilt != other.tilt:
                    return False
                if self.zoom != other.zoom:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_CameraSettings)

        __repr__ = __str__

    _M_SmartHomeIce._t_CameraSettings = IcePy.defineStruct('::SmartHomeIce::CameraSettings', CameraSettings, (), (
        ('pan', (), IcePy._t_float),
        ('tilt', (), IcePy._t_float),
        ('zoom', (), IcePy._t_float)
    ))

    _M_SmartHomeIce.CameraSettings = CameraSettings
    del CameraSettings

if '_t_CameraSettingsList' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce._t_CameraSettingsList = IcePy.defineSequence('::SmartHomeIce::CameraSettingsList', (), _M_SmartHomeIce._t_CameraSettings)

_M_SmartHomeIce._t_Camera = IcePy.defineValue('::SmartHomeIce::Camera', Ice.Value, -1, (), False, True, None, ())

if 'CameraPrx' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.CameraPrx = Ice.createTempClass()
    class CameraPrx(_M_SmartHomeIce.SmartDevicePrx):

        def move(self, command, context=None):
            return _M_SmartHomeIce.Camera._op_move.invoke(self, ((command, ), context))

        def moveAsync(self, command, context=None):
            return _M_SmartHomeIce.Camera._op_move.invokeAsync(self, ((command, ), context))

        def begin_move(self, command, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.Camera._op_move.begin(self, ((command, ), _response, _ex, _sent, context))

        def end_move(self, _r):
            return _M_SmartHomeIce.Camera._op_move.end(self, _r)

        def getCurrentSettings(self, context=None):
            return _M_SmartHomeIce.Camera._op_getCurrentSettings.invoke(self, ((), context))

        def getCurrentSettingsAsync(self, context=None):
            return _M_SmartHomeIce.Camera._op_getCurrentSettings.invokeAsync(self, ((), context))

        def begin_getCurrentSettings(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.Camera._op_getCurrentSettings.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentSettings(self, _r):
            return _M_SmartHomeIce.Camera._op_getCurrentSettings.end(self, _r)

        def setCurrentSettings(self, settings, context=None):
            return _M_SmartHomeIce.Camera._op_setCurrentSettings.invoke(self, ((settings, ), context))

        def setCurrentSettingsAsync(self, settings, context=None):
            return _M_SmartHomeIce.Camera._op_setCurrentSettings.invokeAsync(self, ((settings, ), context))

        def begin_setCurrentSettings(self, settings, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.Camera._op_setCurrentSettings.begin(self, ((settings, ), _response, _ex, _sent, context))

        def end_setCurrentSettings(self, _r):
            return _M_SmartHomeIce.Camera._op_setCurrentSettings.end(self, _r)

        def isRecording(self, context=None):
            return _M_SmartHomeIce.Camera._op_isRecording.invoke(self, ((), context))

        def isRecordingAsync(self, context=None):
            return _M_SmartHomeIce.Camera._op_isRecording.invokeAsync(self, ((), context))

        def begin_isRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.Camera._op_isRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_isRecording(self, _r):
            return _M_SmartHomeIce.Camera._op_isRecording.end(self, _r)

        def startRecording(self, context=None):
            return _M_SmartHomeIce.Camera._op_startRecording.invoke(self, ((), context))

        def startRecordingAsync(self, context=None):
            return _M_SmartHomeIce.Camera._op_startRecording.invokeAsync(self, ((), context))

        def begin_startRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.Camera._op_startRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_startRecording(self, _r):
            return _M_SmartHomeIce.Camera._op_startRecording.end(self, _r)

        def stopRecording(self, context=None):
            return _M_SmartHomeIce.Camera._op_stopRecording.invoke(self, ((), context))

        def stopRecordingAsync(self, context=None):
            return _M_SmartHomeIce.Camera._op_stopRecording.invokeAsync(self, ((), context))

        def begin_stopRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.Camera._op_stopRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_stopRecording(self, _r):
            return _M_SmartHomeIce.Camera._op_stopRecording.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeIce.CameraPrx.ice_checkedCast(proxy, '::SmartHomeIce::Camera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeIce.CameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::Camera'
    _M_SmartHomeIce._t_CameraPrx = IcePy.defineProxy('::SmartHomeIce::Camera', CameraPrx)

    _M_SmartHomeIce.CameraPrx = CameraPrx
    del CameraPrx

    _M_SmartHomeIce.Camera = Ice.createTempClass()
    class Camera(_M_SmartHomeIce.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeIce::Camera', '::SmartHomeIce::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeIce::Camera'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::Camera'

        def move(self, command, current=None):
            raise NotImplementedError("servant method 'move' not implemented")

        def getCurrentSettings(self, current=None):
            raise NotImplementedError("servant method 'getCurrentSettings' not implemented")

        def setCurrentSettings(self, settings, current=None):
            raise NotImplementedError("servant method 'setCurrentSettings' not implemented")

        def isRecording(self, current=None):
            raise NotImplementedError("servant method 'isRecording' not implemented")

        def startRecording(self, current=None):
            raise NotImplementedError("servant method 'startRecording' not implemented")

        def stopRecording(self, current=None):
            raise NotImplementedError("servant method 'stopRecording' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_CameraDisp)

        __repr__ = __str__

    _M_SmartHomeIce._t_CameraDisp = IcePy.defineClass('::SmartHomeIce::Camera', Camera, (), None, (_M_SmartHomeIce._t_SmartDeviceDisp,))
    Camera._ice_type = _M_SmartHomeIce._t_CameraDisp

    Camera._op_move = IcePy.Operation('move', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHomeIce._t_moveCommand, False, 0),), (), None, (_M_SmartHomeIce._t_DeviceNotInOperationalState, _M_SmartHomeIce._t_DeviceError))
    Camera._op_getCurrentSettings = IcePy.Operation('getCurrentSettings', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeIce._t_CameraSettings, False, 0), (_M_SmartHomeIce._t_NoPowerError,))
    Camera._op_setCurrentSettings = IcePy.Operation('setCurrentSettings', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHomeIce._t_CameraSettings, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError, _M_SmartHomeIce._t_DeviceError))
    Camera._op_isRecording = IcePy.Operation('isRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeIce._t_DeviceNotInOperationalState,))
    Camera._op_startRecording = IcePy.Operation('startRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_SmartHomeIce._t_DeviceNotInOperationalState,))
    Camera._op_stopRecording = IcePy.Operation('stopRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_SmartHomeIce._t_DeviceNotInOperationalState,))

    _M_SmartHomeIce.Camera = Camera
    del Camera

_M_SmartHomeIce._t_IndoorCamera = IcePy.defineValue('::SmartHomeIce::IndoorCamera', Ice.Value, -1, (), False, True, None, ())

if 'IndoorCameraPrx' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.IndoorCameraPrx = Ice.createTempClass()
    class IndoorCameraPrx(_M_SmartHomeIce.CameraPrx):

        def isMotionDetectionModeOn(self, context=None):
            return _M_SmartHomeIce.IndoorCamera._op_isMotionDetectionModeOn.invoke(self, ((), context))

        def isMotionDetectionModeOnAsync(self, context=None):
            return _M_SmartHomeIce.IndoorCamera._op_isMotionDetectionModeOn.invokeAsync(self, ((), context))

        def begin_isMotionDetectionModeOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.IndoorCamera._op_isMotionDetectionModeOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isMotionDetectionModeOn(self, _r):
            return _M_SmartHomeIce.IndoorCamera._op_isMotionDetectionModeOn.end(self, _r)

        def setMotionDetectionMode(self, mode, context=None):
            return _M_SmartHomeIce.IndoorCamera._op_setMotionDetectionMode.invoke(self, ((mode, ), context))

        def setMotionDetectionModeAsync(self, mode, context=None):
            return _M_SmartHomeIce.IndoorCamera._op_setMotionDetectionMode.invokeAsync(self, ((mode, ), context))

        def begin_setMotionDetectionMode(self, mode, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.IndoorCamera._op_setMotionDetectionMode.begin(self, ((mode, ), _response, _ex, _sent, context))

        def end_setMotionDetectionMode(self, _r):
            return _M_SmartHomeIce.IndoorCamera._op_setMotionDetectionMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeIce.IndoorCameraPrx.ice_checkedCast(proxy, '::SmartHomeIce::IndoorCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeIce.IndoorCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::IndoorCamera'
    _M_SmartHomeIce._t_IndoorCameraPrx = IcePy.defineProxy('::SmartHomeIce::IndoorCamera', IndoorCameraPrx)

    _M_SmartHomeIce.IndoorCameraPrx = IndoorCameraPrx
    del IndoorCameraPrx

    _M_SmartHomeIce.IndoorCamera = Ice.createTempClass()
    class IndoorCamera(_M_SmartHomeIce.Camera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeIce::Camera', '::SmartHomeIce::IndoorCamera', '::SmartHomeIce::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeIce::IndoorCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::IndoorCamera'

        def isMotionDetectionModeOn(self, current=None):
            raise NotImplementedError("servant method 'isMotionDetectionModeOn' not implemented")

        def setMotionDetectionMode(self, mode, current=None):
            raise NotImplementedError("servant method 'setMotionDetectionMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_IndoorCameraDisp)

        __repr__ = __str__

    _M_SmartHomeIce._t_IndoorCameraDisp = IcePy.defineClass('::SmartHomeIce::IndoorCamera', IndoorCamera, (), None, (_M_SmartHomeIce._t_CameraDisp,))
    IndoorCamera._ice_type = _M_SmartHomeIce._t_IndoorCameraDisp

    IndoorCamera._op_isMotionDetectionModeOn = IcePy.Operation('isMotionDetectionModeOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeIce._t_NoPowerError,))
    IndoorCamera._op_setMotionDetectionMode = IcePy.Operation('setMotionDetectionMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError,))

    _M_SmartHomeIce.IndoorCamera = IndoorCamera
    del IndoorCamera

_M_SmartHomeIce._t_OutdoorCamera = IcePy.defineValue('::SmartHomeIce::OutdoorCamera', Ice.Value, -1, (), False, True, None, ())

if 'OutdoorCameraPrx' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.OutdoorCameraPrx = Ice.createTempClass()
    class OutdoorCameraPrx(_M_SmartHomeIce.CameraPrx):

        def isNightVisionModeOn(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_isNightVisionModeOn.invoke(self, ((), context))

        def isNightVisionModeOnAsync(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_isNightVisionModeOn.invokeAsync(self, ((), context))

        def begin_isNightVisionModeOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_isNightVisionModeOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isNightVisionModeOn(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_isNightVisionModeOn.end(self, _r)

        def setNightVisionMode(self, mode, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setNightVisionMode.invoke(self, ((mode, ), context))

        def setNightVisionModeAsync(self, mode, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setNightVisionMode.invokeAsync(self, ((mode, ), context))

        def begin_setNightVisionMode(self, mode, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setNightVisionMode.begin(self, ((mode, ), _response, _ex, _sent, context))

        def end_setNightVisionMode(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_setNightVisionMode.end(self, _r)

        def isPresetMovementModeOn(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_isPresetMovementModeOn.invoke(self, ((), context))

        def isPresetMovementModeOnAsync(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_isPresetMovementModeOn.invokeAsync(self, ((), context))

        def begin_isPresetMovementModeOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_isPresetMovementModeOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isPresetMovementModeOn(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_isPresetMovementModeOn.end(self, _r)

        def setPresetMovementMode(self, mode, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetMovementMode.invoke(self, ((mode, ), context))

        def setPresetMovementModeAsync(self, mode, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetMovementMode.invokeAsync(self, ((mode, ), context))

        def begin_setPresetMovementMode(self, mode, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetMovementMode.begin(self, ((mode, ), _response, _ex, _sent, context))

        def end_setPresetMovementMode(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetMovementMode.end(self, _r)

        def getPresetSettingsList(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_getPresetSettingsList.invoke(self, ((), context))

        def getPresetSettingsListAsync(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_getPresetSettingsList.invokeAsync(self, ((), context))

        def begin_getPresetSettingsList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_getPresetSettingsList.begin(self, ((), _response, _ex, _sent, context))

        def end_getPresetSettingsList(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_getPresetSettingsList.end(self, _r)

        def setPresetSettingsList(self, settingsList, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetSettingsList.invoke(self, ((settingsList, ), context))

        def setPresetSettingsListAsync(self, settingsList, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetSettingsList.invokeAsync(self, ((settingsList, ), context))

        def begin_setPresetSettingsList(self, settingsList, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetSettingsList.begin(self, ((settingsList, ), _response, _ex, _sent, context))

        def end_setPresetSettingsList(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_setPresetSettingsList.end(self, _r)

        def goToNextPreset(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_goToNextPreset.invoke(self, ((), context))

        def goToNextPresetAsync(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_goToNextPreset.invokeAsync(self, ((), context))

        def begin_goToNextPreset(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_goToNextPreset.begin(self, ((), _response, _ex, _sent, context))

        def end_goToNextPreset(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_goToNextPreset.end(self, _r)

        def goToPreviousPreset(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_goToPreviousPreset.invoke(self, ((), context))

        def goToPreviousPresetAsync(self, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_goToPreviousPreset.invokeAsync(self, ((), context))

        def begin_goToPreviousPreset(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.OutdoorCamera._op_goToPreviousPreset.begin(self, ((), _response, _ex, _sent, context))

        def end_goToPreviousPreset(self, _r):
            return _M_SmartHomeIce.OutdoorCamera._op_goToPreviousPreset.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeIce.OutdoorCameraPrx.ice_checkedCast(proxy, '::SmartHomeIce::OutdoorCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeIce.OutdoorCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::OutdoorCamera'
    _M_SmartHomeIce._t_OutdoorCameraPrx = IcePy.defineProxy('::SmartHomeIce::OutdoorCamera', OutdoorCameraPrx)

    _M_SmartHomeIce.OutdoorCameraPrx = OutdoorCameraPrx
    del OutdoorCameraPrx

    _M_SmartHomeIce.OutdoorCamera = Ice.createTempClass()
    class OutdoorCamera(_M_SmartHomeIce.Camera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeIce::Camera', '::SmartHomeIce::OutdoorCamera', '::SmartHomeIce::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeIce::OutdoorCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::OutdoorCamera'

        def isNightVisionModeOn(self, current=None):
            raise NotImplementedError("servant method 'isNightVisionModeOn' not implemented")

        def setNightVisionMode(self, mode, current=None):
            raise NotImplementedError("servant method 'setNightVisionMode' not implemented")

        def isPresetMovementModeOn(self, current=None):
            raise NotImplementedError("servant method 'isPresetMovementModeOn' not implemented")

        def setPresetMovementMode(self, mode, current=None):
            raise NotImplementedError("servant method 'setPresetMovementMode' not implemented")

        def getPresetSettingsList(self, current=None):
            raise NotImplementedError("servant method 'getPresetSettingsList' not implemented")

        def setPresetSettingsList(self, settingsList, current=None):
            raise NotImplementedError("servant method 'setPresetSettingsList' not implemented")

        def goToNextPreset(self, current=None):
            raise NotImplementedError("servant method 'goToNextPreset' not implemented")

        def goToPreviousPreset(self, current=None):
            raise NotImplementedError("servant method 'goToPreviousPreset' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_OutdoorCameraDisp)

        __repr__ = __str__

    _M_SmartHomeIce._t_OutdoorCameraDisp = IcePy.defineClass('::SmartHomeIce::OutdoorCamera', OutdoorCamera, (), None, (_M_SmartHomeIce._t_CameraDisp,))
    OutdoorCamera._ice_type = _M_SmartHomeIce._t_OutdoorCameraDisp

    OutdoorCamera._op_isNightVisionModeOn = IcePy.Operation('isNightVisionModeOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeIce._t_NoPowerError,))
    OutdoorCamera._op_setNightVisionMode = IcePy.Operation('setNightVisionMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError,))
    OutdoorCamera._op_isPresetMovementModeOn = IcePy.Operation('isPresetMovementModeOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeIce._t_NoPowerError,))
    OutdoorCamera._op_setPresetMovementMode = IcePy.Operation('setPresetMovementMode', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError,))
    OutdoorCamera._op_getPresetSettingsList = IcePy.Operation('getPresetSettingsList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeIce._t_CameraSettingsList, False, 0), (_M_SmartHomeIce._t_NoPowerError,))
    OutdoorCamera._op_setPresetSettingsList = IcePy.Operation('setPresetSettingsList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHomeIce._t_CameraSettingsList, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError, _M_SmartHomeIce._t_DeviceError))
    OutdoorCamera._op_goToNextPreset = IcePy.Operation('goToNextPreset', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHomeIce._t_DeviceNotInOperationalState, _M_SmartHomeIce._t_DeviceError))
    OutdoorCamera._op_goToPreviousPreset = IcePy.Operation('goToPreviousPreset', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHomeIce._t_DeviceNotInOperationalState, _M_SmartHomeIce._t_DeviceError))

    _M_SmartHomeIce.OutdoorCamera = OutdoorCamera
    del OutdoorCamera

if 'TemperatureUnit' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.TemperatureUnit = Ice.createTempClass()
    class TemperatureUnit(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    TemperatureUnit.Celsius = TemperatureUnit("Celsius", 0)
    TemperatureUnit.Fahrenheit = TemperatureUnit("Fahrenheit", 1)
    TemperatureUnit._enumerators = { 0:TemperatureUnit.Celsius, 1:TemperatureUnit.Fahrenheit }

    _M_SmartHomeIce._t_TemperatureUnit = IcePy.defineEnum('::SmartHomeIce::TemperatureUnit', TemperatureUnit, (), TemperatureUnit._enumerators)

    _M_SmartHomeIce.TemperatureUnit = TemperatureUnit
    del TemperatureUnit

if 'FanSpeed' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.FanSpeed = Ice.createTempClass()
    class FanSpeed(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    FanSpeed.Low = FanSpeed("Low", 0)
    FanSpeed.Medium = FanSpeed("Medium", 1)
    FanSpeed.High = FanSpeed("High", 2)
    FanSpeed.Auto = FanSpeed("Auto", 3)
    FanSpeed._enumerators = { 0:FanSpeed.Low, 1:FanSpeed.Medium, 2:FanSpeed.High, 3:FanSpeed.Auto }

    _M_SmartHomeIce._t_FanSpeed = IcePy.defineEnum('::SmartHomeIce::FanSpeed', FanSpeed, (), FanSpeed._enumerators)

    _M_SmartHomeIce.FanSpeed = FanSpeed
    del FanSpeed

if 'Temperature' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.Temperature = Ice.createTempClass()
    class Temperature(object):
        def __init__(self, value=0.0, unit=_M_SmartHomeIce.TemperatureUnit.Celsius):
            self.value = value
            self.unit = unit

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHomeIce.Temperature):
                return NotImplemented
            else:
                if self.value != other.value:
                    return False
                if self.unit != other.unit:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_Temperature)

        __repr__ = __str__

    _M_SmartHomeIce._t_Temperature = IcePy.defineStruct('::SmartHomeIce::Temperature', Temperature, (), (
        ('value', (), IcePy._t_float),
        ('unit', (), _M_SmartHomeIce._t_TemperatureUnit)
    ))

    _M_SmartHomeIce.Temperature = Temperature
    del Temperature

if 'ACSettings' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.ACSettings = Ice.createTempClass()
    class ACSettings(object):
        def __init__(self, targetTemperature=Ice._struct_marker, fanSpeed=_M_SmartHomeIce.FanSpeed.Low, swingEnabled=False):
            if targetTemperature is Ice._struct_marker:
                self.targetTemperature = _M_SmartHomeIce.Temperature()
            else:
                self.targetTemperature = targetTemperature
            self.fanSpeed = fanSpeed
            self.swingEnabled = swingEnabled

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHomeIce.ACSettings):
                return NotImplemented
            else:
                if self.targetTemperature != other.targetTemperature:
                    return False
                if self.fanSpeed != other.fanSpeed:
                    return False
                if self.swingEnabled != other.swingEnabled:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_ACSettings)

        __repr__ = __str__

    _M_SmartHomeIce._t_ACSettings = IcePy.defineStruct('::SmartHomeIce::ACSettings', ACSettings, (), (
        ('targetTemperature', (), _M_SmartHomeIce._t_Temperature),
        ('fanSpeed', (), _M_SmartHomeIce._t_FanSpeed),
        ('swingEnabled', (), IcePy._t_bool)
    ))

    _M_SmartHomeIce.ACSettings = ACSettings
    del ACSettings

_M_SmartHomeIce._t_AirConditioner = IcePy.defineValue('::SmartHomeIce::AirConditioner', Ice.Value, -1, (), False, True, None, ())

if 'AirConditionerPrx' not in _M_SmartHomeIce.__dict__:
    _M_SmartHomeIce.AirConditionerPrx = Ice.createTempClass()
    class AirConditionerPrx(_M_SmartHomeIce.SmartDevicePrx):

        def getCurrentTemperature(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getCurrentTemperature.invoke(self, ((), context))

        def getCurrentTemperatureAsync(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getCurrentTemperature.invokeAsync(self, ((), context))

        def begin_getCurrentTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getCurrentTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentTemperature(self, _r):
            return _M_SmartHomeIce.AirConditioner._op_getCurrentTemperature.end(self, _r)

        def getTargetTemperature(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getTargetTemperature.invoke(self, ((), context))

        def getTargetTemperatureAsync(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getTargetTemperature.invokeAsync(self, ((), context))

        def begin_getTargetTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getTargetTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTargetTemperature(self, _r):
            return _M_SmartHomeIce.AirConditioner._op_getTargetTemperature.end(self, _r)

        def getHumidity(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getHumidity.invoke(self, ((), context))

        def getHumidityAsync(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getHumidity.invokeAsync(self, ((), context))

        def begin_getHumidity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getHumidity.begin(self, ((), _response, _ex, _sent, context))

        def end_getHumidity(self, _r):
            return _M_SmartHomeIce.AirConditioner._op_getHumidity.end(self, _r)

        def getTemperatureUnit(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getTemperatureUnit.invoke(self, ((), context))

        def getTemperatureUnitAsync(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getTemperatureUnit.invokeAsync(self, ((), context))

        def begin_getTemperatureUnit(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getTemperatureUnit.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperatureUnit(self, _r):
            return _M_SmartHomeIce.AirConditioner._op_getTemperatureUnit.end(self, _r)

        def setTemperatureUnit(self, unit, context=None):
            return _M_SmartHomeIce.AirConditioner._op_setTemperatureUnit.invoke(self, ((unit, ), context))

        def setTemperatureUnitAsync(self, unit, context=None):
            return _M_SmartHomeIce.AirConditioner._op_setTemperatureUnit.invokeAsync(self, ((unit, ), context))

        def begin_setTemperatureUnit(self, unit, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.AirConditioner._op_setTemperatureUnit.begin(self, ((unit, ), _response, _ex, _sent, context))

        def end_setTemperatureUnit(self, _r):
            return _M_SmartHomeIce.AirConditioner._op_setTemperatureUnit.end(self, _r)

        def getSettings(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getSettings.invoke(self, ((), context))

        def getSettingsAsync(self, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getSettings.invokeAsync(self, ((), context))

        def begin_getSettings(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.AirConditioner._op_getSettings.begin(self, ((), _response, _ex, _sent, context))

        def end_getSettings(self, _r):
            return _M_SmartHomeIce.AirConditioner._op_getSettings.end(self, _r)

        def setSettings(self, settings, context=None):
            return _M_SmartHomeIce.AirConditioner._op_setSettings.invoke(self, ((settings, ), context))

        def setSettingsAsync(self, settings, context=None):
            return _M_SmartHomeIce.AirConditioner._op_setSettings.invokeAsync(self, ((settings, ), context))

        def begin_setSettings(self, settings, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeIce.AirConditioner._op_setSettings.begin(self, ((settings, ), _response, _ex, _sent, context))

        def end_setSettings(self, _r):
            return _M_SmartHomeIce.AirConditioner._op_setSettings.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeIce.AirConditionerPrx.ice_checkedCast(proxy, '::SmartHomeIce::AirConditioner', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeIce.AirConditionerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::AirConditioner'
    _M_SmartHomeIce._t_AirConditionerPrx = IcePy.defineProxy('::SmartHomeIce::AirConditioner', AirConditionerPrx)

    _M_SmartHomeIce.AirConditionerPrx = AirConditionerPrx
    del AirConditionerPrx

    _M_SmartHomeIce.AirConditioner = Ice.createTempClass()
    class AirConditioner(_M_SmartHomeIce.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeIce::AirConditioner', '::SmartHomeIce::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeIce::AirConditioner'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeIce::AirConditioner'

        def getCurrentTemperature(self, current=None):
            raise NotImplementedError("servant method 'getCurrentTemperature' not implemented")

        def getTargetTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTargetTemperature' not implemented")

        def getHumidity(self, current=None):
            raise NotImplementedError("servant method 'getHumidity' not implemented")

        def getTemperatureUnit(self, current=None):
            raise NotImplementedError("servant method 'getTemperatureUnit' not implemented")

        def setTemperatureUnit(self, unit, current=None):
            raise NotImplementedError("servant method 'setTemperatureUnit' not implemented")

        def getSettings(self, current=None):
            raise NotImplementedError("servant method 'getSettings' not implemented")

        def setSettings(self, settings, current=None):
            raise NotImplementedError("servant method 'setSettings' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeIce._t_AirConditionerDisp)

        __repr__ = __str__

    _M_SmartHomeIce._t_AirConditionerDisp = IcePy.defineClass('::SmartHomeIce::AirConditioner', AirConditioner, (), None, (_M_SmartHomeIce._t_SmartDeviceDisp,))
    AirConditioner._ice_type = _M_SmartHomeIce._t_AirConditionerDisp

    AirConditioner._op_getCurrentTemperature = IcePy.Operation('getCurrentTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeIce._t_Temperature, False, 0), (_M_SmartHomeIce._t_DeviceNotInOperationalState,))
    AirConditioner._op_getTargetTemperature = IcePy.Operation('getTargetTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeIce._t_Temperature, False, 0), (_M_SmartHomeIce._t_DeviceNotInOperationalState,))
    AirConditioner._op_getHumidity = IcePy.Operation('getHumidity', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_double, False, 0), (_M_SmartHomeIce._t_DeviceNotInOperationalState,))
    AirConditioner._op_getTemperatureUnit = IcePy.Operation('getTemperatureUnit', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeIce._t_TemperatureUnit, False, 0), (_M_SmartHomeIce._t_NoPowerError,))
    AirConditioner._op_setTemperatureUnit = IcePy.Operation('setTemperatureUnit', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHomeIce._t_TemperatureUnit, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError,))
    AirConditioner._op_getSettings = IcePy.Operation('getSettings', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeIce._t_ACSettings, False, 0), (_M_SmartHomeIce._t_NoPowerError,))
    AirConditioner._op_setSettings = IcePy.Operation('setSettings', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHomeIce._t_ACSettings, False, 0),), (), None, (_M_SmartHomeIce._t_NoPowerError, _M_SmartHomeIce._t_DeviceError))

    _M_SmartHomeIce.AirConditioner = AirConditioner
    del AirConditioner

# End of module SmartHomeIce
